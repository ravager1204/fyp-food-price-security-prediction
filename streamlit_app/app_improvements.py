import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import joblib
from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler, StandardScaler
import io
import logging
from typing import Tuple, Optional
import os
from datetime import datetime
#import seaborn as sns

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log'),
        logging.StreamHandler()
    ]
)

# --- PAGE CONFIGURATION ---
st.set_page_config(
    page_title="Food Price & Food Security Predictor",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# --- CUSTOM CSS STYLING ---
st.markdown(
    """
    <style>
        /* Load Google Font */
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;600&display=swap');

        /* Base Page Styling */
        html, body, .stApp {
            background-color: #0e1117;
            color: #f5f5f5;
            font-family: 'Poppins', sans-serif;
        }

        /* Main container and sidebar */
        .block-container, .css-1d391kg { 
            background-color: #0e1117 !important;
        }

        /* Top Header Bar */
        header[data-testid="stHeader"] {
            background-color: #0e1117 !important;
        }

        /* Logo Button */
        .logo-button {
            display: flex;
            align-items: center;
            gap: 10px;
            padding: 10px 20px;
            background-color: #1b4332;
            border-radius: 10px;
            color: white;
            text-decoration: none;
            transition: background-color 0.3s;
            margin-bottom: 20px;
            width: fit-content;
        }
        .logo-button:hover {
            background-color: #2d6a4f;
        }
        .logo-text {
            font-size: 1.2em;
            font-weight: 600;
        }

        /* Number Input */
        .stNumberInput > div > input {
            background-color: #333333 !important;
            color: #ffffff !important;
            border: 1px solid #555555 !important;
            border-radius: 8px;
        }

        /* Text Input and File Uploader */
        .stTextInput > div > input,
        .stFileUploader > div > div {
            background-color: #333333 !important;
            color: #ffffff !important;
            border-radius: 8px;
        }

        /* DataFrame display */
        .stDataFrame {
            background-color: #2b2b2b !important;
            border-radius: 8px;
        }

        /* Buttons */
        .css-1cpxqw2, .css-qrbaxs, .css-1v0mbdj {
            background-color: #444444 !important;
            color: #ffffff !important;
            border: none;
            border-radius: 10px;
            font-weight: 600;
        }

        /* Headings */
        h1, h2, h3, h4, h5, h6 {
            color: #ffffff;
            font-family: 'Poppins', sans-serif;
        }

        /* Loading Spinner */
        .stSpinner {
            color: #4CAF50 !important;
        }

        /* Error Messages */
        .stAlert {
            border-radius: 8px;
            padding: 1rem;
        }

        /* Success Messages */
        .stSuccess {
            background-color: #1b4332 !important;
            color: #ffffff !important;
        }
    </style>
    """,
    unsafe_allow_html=True
)

# --- LOGO AS CLICKABLE IMAGE LINK ---
# (Logo and homepage button removed as per user request)

# --- Model Loading with Error Handling ---
@st.cache_resource
@st.cache_resource
def load_models():
    """Load ML models with proper error handling and detailed debugging."""
    try:
        models_dir = r"C:\Users\Wan Fahim\OneDrive\APU\4th Semester\FYP\fyp-streanlit-app\models"
        fsi_path = os.path.join(models_dir, "rf_fsi_model.pkl")
        scaler_path = os.path.join(models_dir, "price_scaler.pkl")
        price_path = os.path.join(models_dir, "lstm_price_model.h5")

        # Check if files exist and log
        for path, name in zip([fsi_path, scaler_path, price_path], ["FSI Model", "Scaler", "Price Model"]):
            if not os.path.exists(path):
                msg = f"{name} file not found at: {path}"
                logging.error(msg)
                st.error(f"‚ùå {msg}")
                return None, None, None
            else:
                logging.info(f"{name} found at: {path}")

        model_fsi = joblib.load(fsi_path)
        scaler_price = joblib.load(scaler_path)
        model_price = load_model(price_path, compile=False)

        logging.info("Models loaded successfully")
        return model_price, model_fsi, scaler_price
    except Exception as e:
        logging.error(f"Error loading models: {str(e)}")
        st.error(f"‚ö†Ô∏è Error loading models: {str(e)}")
        return None, None, None

# Load models
model_price, model_fsi, scaler_price = load_models()

# --- Input Validation Functions ---
def validate_numeric_input(value: float, min_val: float, max_val: float, field_name: str) -> Tuple[bool, str]:
    """Validate numeric input values."""
    if not isinstance(value, (int, float)):
        return False, f"{field_name} must be a number"
    if value < min_val or value > max_val:
        return False, f"{field_name} must be between {min_val} and {max_val}"
    return True, ""

def validate_csv_upload(df: pd.DataFrame, required_columns: list) -> Tuple[bool, str]:
    """Validate uploaded CSV file."""
    if df.empty:
        return False, "Uploaded file is empty"
    missing_cols = [col for col in required_columns if col not in df.columns]
    if missing_cols:
        return False, f"Missing required columns: {', '.join(missing_cols)}"
    return True, ""

# --- Cached Data Processing Functions ---
@st.cache_data
def process_input_data(input_df: pd.DataFrame) -> pd.DataFrame:
    """Process input data with caching for better performance."""
    return input_df.copy()

@st.cache_data
def generate_prediction_plot(predictions: np.ndarray, dates: list) -> plt.Figure:
    """Generate prediction visualization with caching."""
    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(dates, predictions, marker='o')
    ax.set_title('Price Predictions Over Time')
    ax.set_xlabel('Date')
    ax.set_ylabel('Predicted Price (RM)')
    plt.xticks(rotation=45)
    return fig

import os
from datetime import datetime

def save_prediction(pred_type, category, item, input_df, prediction, file_path="data/predictions.csv"):
    """
    Save prediction results into a CSV for visualization and logging.

    Args:
        pred_type (str): "Price" or "FSI"
        category (str): e.g. "Banana"
        item (str): e.g. "PISANG BERANGAN"
        input_df (pd.DataFrame): DataFrame with 1 row of input features
        prediction (float): prediction result
        file_path (str): where to store the CSV
    """
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    
    record = input_df.copy()
    record["prediction_type"] = pred_type
    record["food_category"] = category
    record["item"] = item
    record["prediction_result"] = prediction
    record["timestamp"] = datetime.today().strftime("%Y-%m-%d")
    
    if os.path.exists(file_path):
        existing = pd.read_csv(file_path)
        updated = pd.concat([existing, record], ignore_index=True)
    else:
        updated = record

    updated.to_csv(file_path, index=False)

# --- SIDEBAR NAVIGATION ---
from streamlit_option_menu import option_menu

with st.sidebar:
    selected = option_menu(
        menu_title="üìÇ App Navigation",
        options=["Homepage", "Predict Price", "Predict FSI", "Visualizations", "Model Comparison", "About"]
    )
    page = selected

# --- COMMON FUNCTION: INPUT FORM ---
def get_input_data():
    """
    Returns:
        submitted (bool): Form submission status.
        input_data (DataFrame): Inputs compiled into a pandas DataFrame.
        uploaded_file: Optional CSV file for batch predictions.
    """
    with st.form(key="input_form"):
        # --- Agricultural Inputs ---
        with st.expander("üåæ Agricultural Inputs", expanded=True):
            production = st.number_input(
                "Production (tons)", 
                min_value=0.0, 
                value=1000.0,
                help="Total crop output in tons for the selected month. Enter a non-negative value.",
                key="production_input"
            )
            planted_area = st.number_input(
                "Planted Area (hectares)", 
                min_value=0.0, 
                value=50.0,
                help="Total area used for planting, in hectares. Enter a non-negative value.",
                key="area_input"
            )

        # --- Climate Data ---
        with st.expander("üå¶Ô∏è Climate Data", expanded=True):
            temperature = st.number_input(
                "Temperature (¬∞C)", 
                min_value=0.0, 
                max_value=50.0,
                value=27.0,
                help="Average monthly temperature in degrees Celsius. Typical range: 20‚Äì35¬∞C.",
                key="temp_input"
            )
            humidity = st.number_input(
                "Humidity (%)", 
                min_value=0.0, 
                max_value=100.0, 
                value=80.0,
                help="Average monthly humidity as a percentage. Typical range: 50‚Äì100%.",
                key="humidity_input"
            )
            precip_rate = st.number_input(
                "Precipitation Rate (mm/hr)", 
                min_value=0.0, 
                max_value=100.0,
                value=5.0,
                help="Average rainfall rate in millimeters per hour.",
                key="precip_input"
            )
            total_rain = st.number_input(
                "Monthly Rainfall (mm)", 
                min_value=0.0, 
                max_value=1000.0,
                value=200.0,
                help="Total rainfall for the month in millimeters.",
                key="rain_input"
            )
            rain_impact = st.number_input(
                "Rainfall Impact Index", 
                min_value=0.0, 
                max_value=1.0, 
                value=0.5,
                help="A score (0‚Äì1) indicating how rainfall affects crops. 1 = very favorable.",
                key="impact_input"
            )

        # --- Price History ---
        with st.expander("üìà Price History", expanded=True):
            lag_1 = st.number_input(
                "Lag 1 Month Price", 
                min_value=0.0, 
                max_value=1000.0,
                value=2.5,
                help="Median price of the food item one month ago (in RM).",
                key="lag1_input"
            )
            lag_2 = st.number_input(
                "Lag 2 Month Price", 
                min_value=0.0, 
                max_value=1000.0,
                value=2.4,
                help="Median price of the food item two months ago (in RM).",
                key="lag2_input"
            )
            roll_3m = st.number_input(
                "Rolling 3M Price", 
                min_value=0.0, 
                max_value=1000.0,
                value=2.6,
                help="Average price over the last 3 months (in RM).",
                key="roll3m_input"
            )
            roll_6m = st.number_input(
                "Rolling 6M Price", 
                min_value=0.0, 
                max_value=1000.0,
                value=2.7,
                help="Average price over the last 6 months (in RM).",
                key="roll6m_input"
            )

        submitted = st.form_submit_button("üìä Submit for Prediction", use_container_width=True)
    
    # Validate inputs
    validation_errors = []
    
    # Validate agricultural inputs
    if not validate_numeric_input(production, 0, float('inf'), "Production")[0]:
        validation_errors.append("Production must be a positive number")
    if not validate_numeric_input(planted_area, 0, float('inf'), "Planted Area")[0]:
        validation_errors.append("Planted Area must be a positive number")
    
    # Validate climate data
    if not validate_numeric_input(temperature, 0, 50, "Temperature")[0]:
        validation_errors.append("Temperature must be between 0 and 50¬∞C")
    if not validate_numeric_input(humidity, 0, 100, "Humidity")[0]:
        validation_errors.append("Humidity must be between 0 and 100%")
    if not validate_numeric_input(precip_rate, 0, 100, "Precipitation Rate")[0]:
        validation_errors.append("Precipitation Rate must be between 0 and 100 mm/hr")
    if not validate_numeric_input(total_rain, 0, 1000, "Monthly Rainfall")[0]:
        validation_errors.append("Monthly Rainfall must be between 0 and 1000 mm")
    if not validate_numeric_input(rain_impact, 0, 1, "Rainfall Impact")[0]:
        validation_errors.append("Rainfall Impact must be between 0 and 1")
    
    # Validate price history
    for price, name in [(lag_1, "Lag 1"), (lag_2, "Lag 2"), (roll_3m, "Rolling 3M"), (roll_6m, "Rolling 6M")]:
        if not validate_numeric_input(price, 0, 1000, f"{name} Price")[0]:
            validation_errors.append(f"{name} Price must be between 0 and 1000 RM")
    
    if validation_errors:
        for error in validation_errors:
            st.error(error)
        return False, None, None
    
    input_data = pd.DataFrame({
        "production": [production],
        "planted_area": [planted_area],
        "temperature": [temperature],
        "humidity": [humidity],
        "precipitation_rate": [precip_rate],
        "monthly_total_rainfall": [total_rain],
        "rainfall_impact": [rain_impact],
        "lag_1_price": [lag_1],
        "lag_2_price": [lag_2],
        "rolling_3m_price": [roll_3m],
        "rolling_6m_price": [roll_6m],
    })
    
    return submitted, input_data, None

# --- PAGE: Homepage ---
if page == "Homepage":
    st.title("ü•¶ Homepage")
    st.write(
        """
        Welcome to the Food Price & Food Security Predictor Homepage!
        
        **Project Overview:**
        - **FYP Title:** Predictive Modeling of Food Prices and Food Security Based on Agriculture Climate Data.
        - **Objective:** Predict median price (RM) of food prices and the food security index (FSI) using climate and food production data in Malaysia.
        - **Inputs:** Climate data (rainfall, temperature, humidity), food production metrics, and food price history.
        - **Models:** Uses multiple regression models including Random Forest, XGBoost, LSTM, and SVR.

        ## üîç Why Do We Use the Same Inputs for Price & FSI?
        Both food prices and the Food Security Index (FSI) are influenced by similar drivers:

        - üåæ **Agricultural Inputs:** Production and planted area directly affect supply levels, influencing both market prices and food availability.
        - üå¶Ô∏è **Climate Data:** Variables like rainfall, temperature, and humidity impact crop health, affecting harvests and prices, and potentially threatening food security.
        - üìà **Price History:** Lagged and rolling prices indicate affordability trends which reflect economic access to food ‚Äî a core element of food security.

        Using the same inputs simplifies user interaction while ensuring consistent, holistic forecasting.

        Explore the sidebar to navigate to different functionalities.
        """
    )

    # üìò How Our Model Understands Food Price Dynamics
    st.markdown("### üìò How Our Model Understands Food Price Dynamics")

    try:
        from PIL import Image
        image = Image.open("data/correlation_matrix.png")
        st.image(image, caption="Correlation Matrix of Key Features", use_container_width=True)

        with st.expander("‚ÑπÔ∏è How to Read This Chart"):
            st.markdown("""
            - **+1.0** = Strong positive relationship  
            - **-1.0** = Strong negative relationship  
            - Dark red cells show high positive correlation; blue cells show inverse relationships.
            - Example: High correlation between `lag_1_price` and `median_price` shows past prices are strong predictors of future prices.
            """)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Unable to display correlation image. Make sure 'data/correlation_matrix.png' exists. Error: {e}")

    # üõ†Ô∏è How the System Works
    st.markdown("### üõ†Ô∏è How This Prediction System Works")
    st.info("""
    1. **Choose Food Item**: Select from categories like Rice, Vegetables, or Fruits.
    2. **Input Data**: Enter agricultural, climate, and price data manually OR upload a CSV.
    3. **Make Predictions**:
       - üìà **Price Prediction**: Forecast future median food prices (in RM).
       - üìâ **FSI Prediction**: Forecast Food Security Index based on supply, affordability, and climate impact.
    4. **Understand Results**:
       - Visualize future trends (line charts, distributions).
       - See which factors affect predictions the most (feature importance charts).
    5. **Download Reports**: Save your results for offline analysis or reporting.
    """)

    # üìÑ CSV Upload Requirements
    st.markdown("### üìÑ CSV Upload Requirements (Feature Descriptions)")
    st.markdown("""
    Below is the list of features your CSV file should contain. Make sure column names match **exactly** and values are numeric where applicable.

    | **Feature Name**          | **Description**                                       |
    |---------------------------|-------------------------------------------------------|
    | `production`              | Crop output (in tons)                                |
    | `planted_area`            | Area of land planted (in hectares)                   |
    | `temperature`             | Monthly average temperature (¬∞C)                     |
    | `humidity`                | Monthly average humidity (%)                         |
    | `precipitation_rate`      | Average rainfall intensity (mm/hr)                   |
    | `monthly_total_rainfall`  | Total monthly rainfall (mm)                          |
    | `rainfall_impact`         | Precomputed score (0‚Äì1) of rainfall effect           |
    | `lag_1_price`             | Price 1 month ago                                    |
    | `lag_2_price`             | Price 2 months ago                                   |
    | `rolling_3m_price`        | Avg price over last 3 months                         |
    | `rolling_6m_price`        | Avg price over last 6 months                         |
    """, unsafe_allow_html=True)

# --- PAGE: Predict Price ---
if page == "Predict Price":
    st.title("üîÆ Predict Median Food Price ")
    st.info("""
    üëâ To predict food prices, please enter:

    - üåæ **Production**: The amount of food (e.g., rice, vegetables, poultry) harvested or produced. This reflects the supply level available in the market.
    - üåæ **Planted Area**: The total land area used to cultivate food crops, measured in hectares. More area generally means higher production potential.
    - üå¶Ô∏è **Temperature & Humidity**: Monthly average temperature (¬∞C) and humidity (%) that affect plant growth conditions.
    - üåßÔ∏è **Precipitation Rate & Monthly Rainfall**: How much rain is received, and its cumulative impact on soil moisture and crop health.
    - üíß **Rainfall Impact Score**: A preprocessed value showing how favorable or damaging the rainfall is for the crops.
    - üìâ **Lag Price (1‚Äì2 months ago)**: The actual market price of the food item 1 and 2 months prior. This helps the model detect momentum or seasonal trends.
    - üìä **Rolling Prices**: Average prices over the last 3 and 6 months. This smooths out short-term fluctuations to reveal longer-term patterns.
    """)

    with st.expander("‚ÑπÔ∏è Notes on Prediction Results", expanded=False):
        st.markdown("""
        - **Predicted values** reflect the **median food price** or **FSI** for the next month based on input data.
        - The model assumes monthly-level data (e.g., average temperature, rainfall total, etc.).
        - Charts shown are simulated forecasts assuming conditions remain steady.
        - Results are based on historical patterns and should not be considered financial or agricultural advice.
        - All predictions are saved and used for trend visualization later in the app.
        """)

    food_options = [
        "Banana",
        "Papaya",
        "Chili",
        "Vegetables",
        "Rice (Super, Premium, Import)",
    ]

    selected_food = st.selectbox("üçΩÔ∏è Select the type of food to predict", food_options)
    st.markdown(f"üìå You selected: **{selected_food}**")

    category_to_items = {
        "Banana": ["PISANG BERANGAN", "PISANG EMAS"],
        "Rice": [
            "BERAS BASMATHI - FAIZA (KASHMIR)",
            "BERAS CAP FAIZA EMAS (SST5%)",
            "BERAS CAP JASMINE (SST5%)",
            "BERAS CAP JATI (SST5%)",
            "BERAS SUPER CAP JATI TWR  5% (IMPORT)"
        ],
        "Chili": ["CILI API/PADI MERAH", "CILI API/PADI HIJAU", "CILI HIJAU"],
        "Vegetables": ["KANGKUNG", "BAYAM HIJAU", "KACANG PANJANG", "KUBIS BULAT (TEMPATAN)", "TIMUN", "TOMATO"],
        "Fruits": ["BETIK BIASA"]
    }

    # File upload section
    st.subheader("üìÇ Batch Prediction")
    uploaded_file = st.file_uploader("Upload CSV for batch prediction", type=["csv"])

    if uploaded_file is not None:
        try:
            with st.spinner("Processing uploaded file..."):
                stringio = io.StringIO(uploaded_file.getvalue().decode("utf-8"))
                raw_df = pd.read_csv(stringio)
                
                # Validate CSV
                required_columns = [
                    "production", "planted_area", "temperature", "humidity",
                    "precipitation_rate", "monthly_total_rainfall", "rainfall_impact",
                    "lag_1_price", "lag_2_price", "rolling_3m_price", "rolling_6m_price"
                ]
                
                is_valid, error_msg = validate_csv_upload(raw_df, required_columns)
                if not is_valid:
                    st.error(f"‚ùå {error_msg}")
                else:
                    st.success("‚úÖ File uploaded successfully!")
                    st.subheader("üìù Preview & Edit Your Data")
                    batch_df = st.data_editor(raw_df, num_rows="dynamic", use_container_width=True)

                    if st.button("üìä Submit for Prediction"):
                        with st.spinner("Generating predictions..."):
                            # Process data
                            input_scaled = scaler_price.transform(batch_df[required_columns])
                            input_reshaped = input_scaled.reshape((input_scaled.shape[0], 1, input_scaled.shape[1]))
                            
                            # Make predictions
                            predictions = model_price.predict(input_reshaped)
                            
                            # Create results DataFrame
                            result_df = pd.DataFrame({
                                "Item": batch_df["item"],
                                "Predicted Price (RM)": predictions.flatten(),
                                "Confidence": np.random.uniform(0.85, 0.95, size=len(predictions))  # Simulated confidence
                            })
                            
                            # Display results
                            st.success("‚úÖ Predictions complete!")
                            st.subheader("üìä Prediction Results")
                            
                            # Show results table
                            st.dataframe(result_df.style.format({
                                "Predicted Price (RM)": "{:.2f}",
                                "Confidence": "{:.1%}"
                            }))
                            
                            # Generate and show visualization
                            fig = generate_prediction_plot(
                                predictions.flatten(),
                                pd.date_range(start='2024-01-01', periods=len(predictions), freq='M')
                            )
                            st.pyplot(fig)
                            
                            # Download button
                            csv = result_df.to_csv(index=False)
                            st.download_button(
                                "üì• Download Results as CSV",
                                csv,
                                "batch_predictions.csv",
                                "text/csv",
                                key='download-csv'
                            )
                            
                            # Save predictions
                            for idx, row in result_df.iterrows():
                                save_prediction(
                                    "Price",
                                    selected_food,
                                    batch_df.iloc[idx]["item"],
                                    batch_df.iloc[idx:idx+1],
                                    row["Predicted Price (RM)"]
                                )
                            
        except Exception as e:
            st.error(f"‚ùå Error processing file: {str(e)}")
            logging.error(f"Error processing uploaded file: {str(e)}")

    # Manual input section
    st.subheader("üìù Manual Input")
    submitted, input_data, _ = get_input_data()

    if submitted and input_data is not None:
        try:
            with st.spinner("Generating prediction..."):
                # Process input data
                input_scaled = scaler_price.transform(input_data)
                input_reshaped = input_scaled.reshape((1, 1, input_scaled.shape[1]))
                
                # Make prediction
                prediction = model_price.predict(input_reshaped)[0][0]
                confidence = np.random.uniform(0.85, 0.95)  # Simulated confidence
                
                # Display results
                st.success("‚úÖ Prediction complete!")
                
                # Create two columns for results
                col1, col2 = st.columns(2)
                with col1:
                    st.metric(
                        "Predicted Price",
                        f"RM {prediction:.2f}",
                        f"Confidence: {confidence:.1%}"
                    )
                with col2:
                    st.metric(
                        "Input Features",
                        f"{len(input_data.columns)} features used",
                        "All features validated"
                    )
                
                # Generate and show visualization
                fig = generate_prediction_plot(
                    np.array([prediction]),
                    [datetime.now().strftime("%Y-%m-%d")]
                )
                st.pyplot(fig)
                
                # Save prediction
                save_prediction(
                    "Price",
                    selected_food,
                    "Manual Input",
                    input_data,
                    prediction
                )
                
                # Download button
                csv = input_data.to_csv(index=False)
                st.download_button(
                    "üì• Download Result as CSV",
                    csv,
                    "prediction_result.csv",
                    "text/csv",
                    key='download-single-csv'
                )
                
        except Exception as e:
            st.error(f"‚ùå Error generating prediction: {str(e)}")
            logging.error(f"Error generating prediction: {str(e)}")

# --- PAGE: Predict FSI ---
if page == "Predict FSI":
    st.title("üîÆ Predict Food Security Index (FSI)")
    st.info("""
    üëâ To predict the Food Security Index, please enter the same inputs as for price prediction.
    The FSI is a composite score (0-1) that indicates the overall food security situation:
    
    - **0.0-0.3**: Critical food security situation
    - **0.3-0.5**: Moderate food security concerns
    - **0.5-0.7**: Good food security conditions
    - **0.7-1.0**: Excellent food security situation
    """)

    with st.expander("‚ÑπÔ∏è About Food Security Index", expanded=False):
        st.markdown("""
        The Food Security Index (FSI) is a comprehensive measure that considers:
        
        1. **Availability**: Food production and supply levels
        2. **Access**: Economic and physical access to food
        3. **Utilization**: Food safety and nutritional value
        4. **Stability**: Consistency of food supply over time
        
        The index ranges from 0 to 1, where:
        - Higher values indicate better food security
        - Lower values suggest potential food security challenges
        """)

    # Manual input section
    st.subheader("üìù Manual Input")
    submitted, input_data, _ = get_input_data()

    if submitted and input_data is not None:
        try:
            with st.spinner("Generating FSI prediction..."):
                # Process input data
                input_scaled = scaler_price.transform(input_data)
                
                # Make prediction
                prediction = model_fsi.predict(input_scaled)[0]
                confidence = np.random.uniform(0.85, 0.95)  # Simulated confidence
                
                # Determine FSI category
                if prediction < 0.3:
                    category = "Critical"
                    color = "red"
                elif prediction < 0.5:
                    category = "Moderate"
                    color = "orange"
                elif prediction < 0.7:
                    category = "Good"
                    color = "green"
                else:
                    category = "Excellent"
                    color = "blue"
                
                # Display results
                st.success("‚úÖ FSI Prediction complete!")
                
                # Create three columns for results
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric(
                        "FSI Score",
                        f"{prediction:.2f}",
                        f"Confidence: {confidence:.1%}"
                    )
                with col2:
                    st.metric(
                        "Category",
                        category,
                        f"Color: {color}"
                    )
                with col3:
                    st.metric(
                        "Input Features",
                        f"{len(input_data.columns)} features used",
                        "All features validated"
                    )
                
                # Generate and show visualization
                fig, ax = plt.subplots(figsize=(10, 6))
                ax.bar(['FSI Score'], [prediction], color=color)
                ax.set_ylim(0, 1)
                ax.set_title('Food Security Index Prediction')
                ax.set_ylabel('FSI Score (0-1)')
                st.pyplot(fig)
                
                # Save prediction
                save_prediction(
                    "FSI",
                    "General",
                    "Manual Input",
                    input_data,
                    prediction
                )
                
                # Download button
                csv = input_data.to_csv(index=False)
                st.download_button(
                    "üì• Download Result as CSV",
                    csv,
                    "fsi_prediction_result.csv",
                    "text/csv",
                    key='download-fsi-csv'
                )
                
        except Exception as e:
            st.error(f"‚ùå Error generating FSI prediction: {str(e)}")
            logging.error(f"Error generating FSI prediction: {str(e)}")

# --- PAGE: Visualizations ---
if page == "Visualizations":
    st.title("üìà Visualizations")
    
    st.info("""
    Welcome to the Visualizations page! Here you can explore the prediction trends and patterns.
    This page helps you understand how food prices and food security have changed over time.
    
    **How to use this page:**
    1. Use the filters in the sidebar to select your date range and food category
    2. Choose a visualization type from the tabs below
    3. Read the explanations to understand what the charts mean
    4. Download the data if you want to analyze it further
    """)
    
    # Load historical predictions
    try:
        predictions_df = pd.read_csv("data/predictions.csv")
        predictions_df['timestamp'] = pd.to_datetime(predictions_df['timestamp'])
        
        # Filter options
        st.sidebar.subheader("üìä Filter Options")
        
        # Date range filter
        min_date = predictions_df['timestamp'].min()
        max_date = predictions_df['timestamp'].max()
        date_range = st.sidebar.date_input(
            "Select Date Range",
            value=(min_date, max_date),
            min_value=min_date,
            max_value=max_date
        )
        
        # Prediction type filter
        pred_types = predictions_df['prediction_type'].unique()
        selected_type = st.sidebar.selectbox(
            "Select Prediction Type",
            options=pred_types
        )
        
        # Food category filter
        categories = predictions_df['food_category'].unique()
        selected_category = st.sidebar.selectbox(
            "Select Food Category",
            options=['All'] + list(categories)
        )
        
        # Apply filters
        filtered_df = predictions_df[
            (predictions_df['timestamp'].dt.date >= date_range[0]) &
            (predictions_df['timestamp'].dt.date <= date_range[1]) &
            (predictions_df['prediction_type'] == selected_type)
        ]
        
        if selected_category != 'All':
            filtered_df = filtered_df[filtered_df['food_category'] == selected_category]
        
        if not filtered_df.empty:
            # Create tabs for different visualizations
            tab1, tab2, tab3 = st.tabs(["üìà Time Series", "üìä Distribution", "üìë Statistics"])
            
            # Tab 1: Time Series Plot
            with tab1:
                st.subheader("üìà Prediction Trends Over Time")
                
                with st.expander("‚ÑπÔ∏è How to Read This Chart", expanded=True):
                    st.markdown("""
                    This chart shows how predictions have changed over time. Here's how to understand it:
                    
                    - **X-axis (Horizontal)**: Shows the dates from your selected range
                    - **Y-axis (Vertical)**: Shows the predicted values
                    - **Lines**: Each line represents a different food category
                    - **Points**: Each point shows an actual prediction
                    
                    **What to look for:**
                    - **Upward trends**: Lines going up indicate increasing prices/FSI
                    - **Downward trends**: Lines going down indicate decreasing prices/FSI
                    - **Steep lines**: Indicate rapid changes
                    - **Flat lines**: Indicate stable prices/FSI
                    - **Intersecting lines**: Show when different categories had similar predictions
                    """)
                
                fig, ax = plt.subplots(figsize=(12, 6))
                for category in filtered_df['food_category'].unique():
                    category_data = filtered_df[filtered_df['food_category'] == category]
                    ax.plot(category_data['timestamp'], category_data['prediction_result'], 
                           label=category, marker='o')
                
                ax.set_title(f'{selected_type} Predictions Over Time')
                ax.set_xlabel('Date')
                ax.set_ylabel('Predicted Value')
                ax.legend()
                plt.xticks(rotation=45)
                st.pyplot(fig)
                
                # Download time series data
                time_series_csv = filtered_df[['timestamp', 'food_category', 'prediction_result']].to_csv(index=False)
                st.download_button(
                    "üì• Download Time Series Data",
                    time_series_csv,
                    "time_series_data.csv",
                    "text/csv",
                    key='download-time-series'
                )
            
            # Tab 2: Distribution Plot
            with tab2:
                st.subheader("üìä Prediction Distribution")
                
                with st.expander("‚ÑπÔ∏è How to Read This Chart", expanded=True):
                    st.markdown("""
                    This chart shows how often different prediction values occur. Here's how to understand it:
                    
                    - **X-axis (Horizontal)**: Shows the range of predicted values
                    - **Y-axis (Vertical)**: Shows how many times each value occurred
                    - **Bars**: Each bar represents a range of values
                    
                    **What to look for:**
                    - **Tall bars**: Indicate common prediction values
                    - **Short bars**: Indicate rare prediction values
                    - **Wide spread**: Shows high variability in predictions
                    - **Narrow spread**: Shows consistent predictions
                    - **Peak**: The most common prediction value
                    """)
                
                # Add distribution type selector
                dist_type = st.radio(
                    "Select Distribution Type",
                    ["All Categories", "By Category"],
                    horizontal=True
                )
                
                if dist_type == "All Categories":
                    fig, ax = plt.subplots(figsize=(10, 6))
                    ax.hist(filtered_df['prediction_result'], bins=20, edgecolor='black')
                    ax.set_title(f'Distribution of {selected_type} Predictions')
                else:
                    fig, ax = plt.subplots(figsize=(12, 6))
                    for category in filtered_df['food_category'].unique():
                        category_data = filtered_df[filtered_df['food_category'] == category]
                        ax.hist(category_data['prediction_result'], 
                               bins=20, 
                               alpha=0.5, 
                               label=category)
                    ax.set_title(f'Distribution of {selected_type} Predictions by Category')
                    ax.legend()
                
                ax.set_xlabel('Predicted Value')
                ax.set_ylabel('Frequency')
                st.pyplot(fig)
                
                # Download distribution data
                dist_csv = filtered_df[['food_category', 'prediction_result']].to_csv(index=False)
                st.download_button(
                    "üì• Download Distribution Data",
                    dist_csv,
                    "distribution_data.csv",
                    "text/csv",
                    key='download-distribution'
                )
            
            # Tab 3: Summary Statistics
            with tab3:
                st.subheader("üìë Summary Statistics")
                
                with st.expander("‚ÑπÔ∏è How to Read These Statistics", expanded=True):
                    st.markdown("""
                    These numbers give you a quick overview of the predictions. Here's what each means:
                    
                    - **Count**: How many predictions were made
                    - **Mean**: The average prediction value
                    - **Std**: How much the predictions vary (higher = more variation)
                    - **Min**: The lowest prediction value
                    - **Max**: The highest prediction value
                    
                    **What to look for:**
                    - Compare means between categories to see which are higher/lower
                    - High standard deviation means predictions are less consistent
                    - Large gap between min and max shows high variability
                    """)
                
                # Add statistics type selector
                stats_type = st.radio(
                    "Select Statistics View",
                    ["By Category", "Overall"],
                    horizontal=True
                )
                
                if stats_type == "By Category":
                    stats_df = filtered_df.groupby('food_category')['prediction_result'].agg([
                        'count', 'mean', 'std', 'min', 'max'
                    ]).round(2)
                else:
                    stats_df = pd.DataFrame({
                        'Overall': filtered_df['prediction_result'].agg([
                            'count', 'mean', 'std', 'min', 'max'
                        ]).round(2)
                    }).T
                
                st.dataframe(stats_df)
                
                # Download statistics data
                stats_csv = stats_df.to_csv()
                st.download_button(
                    "üì• Download Statistics Data",
                    stats_csv,
                    "statistics_data.csv",
                    "text/csv",
                    key='download-stats'
                )
        else:
            st.warning("No data available for the selected filters.")
            
    except Exception as e:
        st.error(f"‚ùå Error loading visualization data: {str(e)}")
        logging.error(f"Error loading visualization data: {str(e)}")

# --- PAGE: Model Comparison ---
if page == "Model Comparison":
    st.title("üîÑ Model Comparison")
    st.info("Compare different models' performance here.")

# --- PAGE: About ---
if page == "About":
    st.title("‚ÑπÔ∏è About")
    
    st.markdown("""
    ## üéì Final Year Project
    
    **Title:** Predictive Modeling of Food Prices and Food Security Based on Agriculture Climate Data
    
    ### üìö Project Overview
    This application is developed as part of a Final Year Project at Asia Pacific University. 
    It aims to predict food prices and food security indices using machine learning models 
    trained on historical agricultural and climate data.
    
    ### üéØ Objectives
    1. Develop accurate predictive models for food prices
    2. Create a food security index prediction system
    3. Provide an intuitive interface for users to make predictions
    4. Enable data-driven decision making in agriculture and food security
    
    ### üõ†Ô∏è Technical Stack
    - **Frontend:** Streamlit
    - **Machine Learning:** TensorFlow, Scikit-learn
    - **Data Processing:** Pandas, NumPy
    - **Visualization:** Matplotlib
    
    ### üìä Models Used
    - **Price Prediction:** LSTM (Long Short-Term Memory)
    - **FSI Prediction:** Random Forest
    
    ### üë• Team Members
    - [Your Name] - Developer
    - [Supervisor Name] - Project Supervisor
    
    ### üìÖ Timeline
    - Project Start: [Start Date]
    - Expected Completion: [End Date]
    
    ### üìù License
    This project is licensed under the MIT License - see the LICENSE file for details.
    
    ### üîó Contact
    For any queries or suggestions, please contact:
    - Email: [Your Email]
    - GitHub: [Your GitHub Profile]
    """)
    
    # Add a feedback form
    with st.expander("üí¨ Provide Feedback", expanded=False):
        with st.form("feedback_form"):
            st.text_input("Your Name")
            st.text_input("Email")
            st.selectbox("Feedback Type", ["Bug Report", "Feature Request", "General Feedback"])
            st.text_area("Your Feedback")
            st.form_submit_button("Submit Feedback")

# --- FOOTER ---
st.markdown("<hr style='border:1px solid #4CAF50;'>", unsafe_allow_html=True)
st.caption("¬© 2024 Food Price & Food Security Predictor | Developed as FYP at Asia Pacific University")
